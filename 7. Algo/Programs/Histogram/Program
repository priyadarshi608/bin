// C++ program to find maximum rectangular area in linear time
#include<iostream>
#include<stack>
using namespace std;
 
// The main function to find the maximum rectangular area under given
// histogram with n bars
int getMaxArea(int hist[], int n)
{
    // Create an empty stack. The stack holds indexes of hist[] array
    // The bars stored in stack are always in increasing order of their
    // heights.
    stack<int> s;
 
    int max_area = 0; // Initalize max area
    int tp;  // To store top of stack
    int area_with_top; // To store area with top bar as the smallest bar
 
    // Run through all bars of given histogram
    int i = 0;
    while (i < n)
    {
    	std::cout << "while (i < n): " << "i: " << i << ", n: " << n << "\n";
        // If this bar is higher than the bar on top stack, push it to stack
        if (s.empty() || hist[s.top()] <= hist[i])
        {
            std::cout << "In if part......\n";
            std::cout << "i: " << i << "\n";
            if (s.empty()) {
            	std::cout << "stack is empty.\n";
            }
            else {
            	std::cout << "Stack: ";
                for (std::stack<int> dump = s; !dump.empty(); dump.pop()) {
                    std::cout << dump.top() << ", ";
                }
                std::cout << "\n";
                std::cout << "hist[i]: " << hist[i] << "\n";
                std::cout << "s.top(): " << s.top() << "\n";
                std::cout << "hist[s.top()]: " << hist[s.top()] << "\n";
            }
            std::cout << "Pushing " << i << " in the stack\n";
            s.push(i++);
            std::cout << "new i: " << i << "\n\n";
        }
 
        // If this bar is lower than top of stack, then calculate area of rectangle 
        // with stack top as the smallest (or minimum height) bar. 'i' is 
        // 'right index' for the top and element before top in stack is 'left index'
        else
        {
        	std::cout << "In else part" << "\n";
        	std::cout << "Stack: ";
            for (std::stack<int> dump = s; !dump.empty(); dump.pop()) {
                std::cout << dump.top() << ", ";
            }
            std::cout << "\n";
            tp = s.top();  // store the top index
            s.pop();  // pop the top
 
            std::cout << "hist[tp]: " << hist[tp] << "\n";
            if (s.empty()) {
            	std::cout << "stack is empty.." << "\n";
                std::cout << "i: " << i << "\n";
            }
            else {
            	std::cout << "stack is not empty.." << "\n";
            	std::cout << "i: " << i << ", s.top(): " << s.top() << "\n";
                std::cout << "i - s.top() - 1: " << i - s.top() - 1 << "\n";
            }
 
            // Calculate the area with hist[tp] stack as smallest bar
            area_with_top = hist[tp] * (s.empty() ? i : i - s.top() - 1);
            std::cout << "area_with_top: " << area_with_top << "\n";
 
            // update max area, if needed
            if (max_area < area_with_top)
                max_area = area_with_top;
            std::cout << "\n";
        }
    }
 
    // Now pop the remaining bars from stack and calculate area with every
    // popped bar as the smallest bar
    while (s.empty() == false)
    {
    	std::cout << "In second while.." << "\n";
        	std::cout << "Stack: ";
            for (std::stack<int> dump = s; !dump.empty(); dump.pop()) {
                std::cout << dump.top() << ", ";
            }
            std::cout << "\n";
        tp = s.top();
        s.pop();
            std::cout << "hist[tp]: " << hist[tp] << "\n";
            if (s.empty())
            std::cout << "i: " << i << "\n";
            else
            std::cout << "i - s.top() - 1: " << i - s.top() - 1 << "\n";
        area_with_top = hist[tp] * (s.empty() ? i : i - s.top() - 1);
            std::cout << "area_with_top: " << area_with_top << "\n";
 
        if (max_area < area_with_top)
            max_area = area_with_top;
        std::cout << "\n";
    }
 
    return max_area;
}
 
// Driver program to test above function
int main()
{
    int hist[] = {6, 2, 5, 4, 5, 1, 6};
    int n = sizeof(hist)/sizeof(hist[0]);
    cout << "Maximum area is " << getMaxArea(hist, n);
    return 0;
}

